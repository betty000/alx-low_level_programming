!<arch>
0-isupper.c/    0           0     0     644     194       `
#include "main.h"

/**
 * _isupper - function that checks for uppercase character
 * @c: integer parameter
 * Return: sth but success
 */
int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}
0-memset.c/     0           0     0     644     277       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 * @s: array of char
 * @b: array of chat
 * @n: number of bytes
 * Return:(s)
 */
char *_memset(char *s, char b, unsigned int n)
{
	char *p = s;

	while (n > 0)
	{
		*p = b;
		p++;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     348       `
#include "main.h"

/**
 * *_strcat - function that concatenates two strings
 * @dest: frist parameter
 * @src: second parameter
 * Return: a string
 */
char *_strcat(char *dest, char *src)
{
	int len = 0, i;

	while (dest[len])
		len++;
	for (i = 0; src[i] != '\0'; i++)
	{
		dest[len] = src[i];
		len += 1;
	}
	dest[len] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     564       `
#include "main.h"

/**
 * _atoi - function that convert a string to an integer
 * @s: input pointer
 * Return: integer value
 */
int _atoi(char *s)
{
	int value = 0;
	int j = 0;
	int isnum = 0;
	int sign = 1;

	for (; s[j]; j++)
	{
		if (s[j] == '-')
			sign *= -1;
		if (s[j] >= '0' && s[j] <= '9')
		{
			if (sign < 1)
			{
				isnum = 1;
				value *= 10;
				value += -(s[j] - '0');
				continue;
			}
			else
			{
				isnum = 1;
				value *= 10;
				value += s[j] - '0';
				continue;
			}
		}
		else if (isnum)
		{
			j++;
			break;
		}
	}
	return (value);
}
1-isdigit.c/    0           0     0     644     169       `
#include "main.h"

/**
 * _isdigit -checks for a digit (0 through 9)
 * @c: an integer argument
 * Return: 0
 */
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}

1-memcpy.c/     0           0     0     644     314       `
#include "main.h"
#include <stdio.h>

/**
 * _memcpy - copies memory area
 * @dest: array of string
 * @src: array of string
 * @n: number of bytes
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     369       `
#include "main.h"
#include <string.h>

/**
 * _strncat - this is a function strcat
 * @dest: first parameter
 * @src: second parameter
 * @n: integer
 * Return: a string
 */
char *_strncat(char *dest, char *src, int n)
{
	int x = 0;
	int y = 0;

	while (dest[x] != '\0')
		x++;
	while (src[y] != '\0' && y < n)
	{
		dest[x] = src[y];
		y++;
		x++;
	}
	return (dest);
}

2-strchr.c/     0           0     0     644     245       `
#include "main.h"

/**
 * _strchr -  locates a character in a string
 * @s: string s
 * @c: string .
 * Return: the pointer which occurence
 */
char *_strchr(char *s, char c)
{
	do {
		if (*s == c)
			return (s);
	} while (*s++);
	return (0);
}

2-strlen.c/     0           0     0     644     219       `
#include "main.h"

/**
 * _strlen - function that returns the length of a string
 * @s: sting pointer
 * Return: returns length of the string
 */
int _strlen(char *s)
{
	int a = 0;

	for (; *s++;)
		a++;
	return (a);
}

2-strncpy.c/    0           0     0     644     245       `
#include "main.h"
#include <string.h>

/**
 * *_strncpy -  copies a string
 * @dest: parameter1
 * @src: parameter2
 * @n: parameter3
 * Return: string
 */
char *_strncpy(char *dest, char *src, int n)
{
	strncpy(dest, src, n);
	return (dest);
}

3-islower.c/    0           0     0     644     225       `
#include "main.h"
/**
 * _islower - returns 1 if char is lowercase
 * @c: character to be checked if lower case, type int.
 * Return: 1 if lower case, 0 otherwise.
 */
int _islower(int c)
{

	return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     220       `
#include "main.h"

/**
 * _puts - function that prints a string
 * @str: the string
 * Return: the length of the string
 */
void _puts(char *str)
{
	for (; *str != '\0'; str++)
	{
		_putchar(*str);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     232       `
#include "main.h"
#include <string.h>

/**
 * _strcmp - compares two strings
 * @s1: parameter1
 * @s2: parameter2
 * Return: integer
 */
int _strcmp(char *s1, char *s2)
{
	int result;

	result = strcmp(s1, s2);
	return (result);
}
3-strspn.c/     0           0     0     644     475       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 * @s: string to check
 * @accept: string to check against
 * Return: number of bytes of s in accept
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, k, flag;
	int counter = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		flag = 0;
		for (k = 0; accept[k] != '\0'; k++)
		{
			if (s[i] == accept[k])
			{
				counter++;
				flag = 1;
			}
		}
		if (flag == 0)
			return (counter);
	}
	return (0);
}

4-isalpha.c/    0           0     0     644     282       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character.
 * @c: character to be checked if alphabetic, type int
 * Return: 1 if alphabetic, 0 otherwise
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     361       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: first string
 * @accept: second string
 * Return: 0
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
				break;
		}
		if (accept[j])
			return (s + i);
	}
	return (0);
}

5-strstr.c/     0           0     0     644     551       `
#include "main.h"

/**
 * _strstr - locates a substring
 * @haystack: first string.
 * @needle: second string.
 * Return: char
 */
char *_strstr(char *haystack, char *needle)
{
	unsigned int length_needle = 0, i = 0, j, tmp, checker;

	while (needle[length_needle] != '\0')
		length_needle++;
	while (haystack[i] != '\0')
	{
		tmp = i;
		checker = 0;
		for (j = 0; j < length_needle; j++)
		{
			if (haystack[tmp] == needle[j])
			{
				tmp++;
				checker++;
			}
		}
		if (checker == length_needle)
			return (haystack + i);
		i++;
	}
	return (0);
}

6-abs.c/        0           0     0     644     171       `
#include "main.h"

/**
 * _abs - returns absolute value of a number
 * @n: parameter
 * Return: absolute value
 */
int _abs(int n)
{
	if (n < 0)
		n = -n;
	return (n);
}


9-strcpy.c/     0           0     0     644     317       `
#include "main.h"

/**
 * _strcpy - function that copies the string pointed to by src
 * @dest: dest pointer
 * @src: src pointer
 * Return: coied value
 */
char *_strcpy(char *dest, char *src)
{
	char *result = dest;

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (result);
}

_putchar.c/     0           0     0     644     244       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
